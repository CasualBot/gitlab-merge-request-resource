#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

payload=$(mktemp "${TMPDIR}/gitlab-merge-request-resource.XXXXXX")

cat > "${payload}" <&0

gitlab_host=$(jq -r '.source.gitlab_host // ""' < "${payload}")
private_token=$(jq -r '.source.private_token // ""' < "${payload}")
project_path=$(jq -r '.source.project_path // ""' < "${payload}")
version=$(jq -r '.version // ""' < "${payload}")
version_updated_at=$(jq -r '.version.updated_at // ""' < "${payload}")
version_sha=$(jq -r '.version.sha // ""' < "${payload}")

project_path="${project_path//'/'/'%2F'}" # url encode "/"

if [ -z "${version}" ]; then
  version='{"updated_at":"1800-01-01T00:00:00.000Z","sha":null}'
fi

open_mrs=$(curl \
--header "PRIVATE-TOKEN: ${private_token}" \
"https://${gitlab_host}/api/v3/projects/${project_path}/merge_requests?state=opened")

num_mrs="$(echo "${open_mrs}" | jq 'length')"

function to_seconds {
  date -d "$(echo "$1" | sed 's/.\{5\}$//' | tr T ' ')" +%s
}

new_versions=''

for i in $(seq 0 $((num_mrs - 1))); do
  mr="$(echo "${open_mrs}" | jq -r '.['"$i"']')"
  mr_updated_at="$(echo "${mr}" | jq -r '.updated_at')"
  mr_sha="$(echo "${mr}" | jq -r '.')"

  if [ "$(to_seconds "${mr_updated_at}")" -gt "$(to_seconds "${version_updated_at}")" ] && [ "${mr_sha}" -ne "${version_sha}" ]; then
      mr_id="$(echo "${mr}" | jq -r '.id')"

      new_versions="${new_versions},{\"updated_at\":\"${mr_updated_at}\",\"mr_id\":\"${mr_id}\",\"sha\":\"${mr_sha}\"}"
  fi
done

new_versions=${new_versions#','} # remove trailing comma
new_versions="[${new_versions}]" # make JSON array

if [ "${new_versions}" == '[]' ]; then
  new_versions="[${version}]"
fi

jq -n "${new_versions}" >&3
